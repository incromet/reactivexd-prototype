/**
 * generated by Xtext 2.17.0
 */
package co.edu.escuelaing.reactivexd.reactiveXD.util;

import co.edu.escuelaing.reactivexd.reactiveXD.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see co.edu.escuelaing.reactivexd.reactiveXD.ReactiveXDPackage
 * @generated
 */
public class ReactiveXDAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ReactiveXDPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReactiveXDAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = ReactiveXDPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ReactiveXDSwitch<Adapter> modelSwitch =
    new ReactiveXDSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseDecl(Decl object)
      {
        return createDeclAdapter();
      }
      @Override
      public Adapter caseObsrvDecl(ObsrvDecl object)
      {
        return createObsrvDeclAdapter();
      }
      @Override
      public Adapter caseObsrvAssig(ObsrvAssig object)
      {
        return createObsrvAssigAdapter();
      }
      @Override
      public Adapter caseEventExpression(EventExpression object)
      {
        return createEventExpressionAdapter();
      }
      @Override
      public Adapter caseEventPredicate(EventPredicate object)
      {
        return createEventPredicateAdapter();
      }
      @Override
      public Adapter caseTrigger(Trigger object)
      {
        return createTriggerAdapter();
      }
      @Override
      public Adapter caseJVMTYPE(JVMTYPE object)
      {
        return createJVMTYPEAdapter();
      }
      @Override
      public Adapter caseKindAttribute(KindAttribute object)
      {
        return createKindAttributeAdapter();
      }
      @Override
      public Adapter caseMSig(MSig object)
      {
        return createMSigAdapter();
      }
      @Override
      public Adapter caseOrEvent(OrEvent object)
      {
        return createOrEventAdapter();
      }
      @Override
      public Adapter caseAndEvent(AndEvent object)
      {
        return createAndEventAdapter();
      }
      @Override
      public Adapter caseUnaryEvent(UnaryEvent object)
      {
        return createUnaryEventAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link co.edu.escuelaing.reactivexd.reactiveXD.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.edu.escuelaing.reactivexd.reactiveXD.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.edu.escuelaing.reactivexd.reactiveXD.Decl <em>Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.edu.escuelaing.reactivexd.reactiveXD.Decl
   * @generated
   */
  public Adapter createDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.edu.escuelaing.reactivexd.reactiveXD.ObsrvDecl <em>Obsrv Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.edu.escuelaing.reactivexd.reactiveXD.ObsrvDecl
   * @generated
   */
  public Adapter createObsrvDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.edu.escuelaing.reactivexd.reactiveXD.ObsrvAssig <em>Obsrv Assig</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.edu.escuelaing.reactivexd.reactiveXD.ObsrvAssig
   * @generated
   */
  public Adapter createObsrvAssigAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.edu.escuelaing.reactivexd.reactiveXD.EventExpression <em>Event Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.edu.escuelaing.reactivexd.reactiveXD.EventExpression
   * @generated
   */
  public Adapter createEventExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.edu.escuelaing.reactivexd.reactiveXD.EventPredicate <em>Event Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.edu.escuelaing.reactivexd.reactiveXD.EventPredicate
   * @generated
   */
  public Adapter createEventPredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.edu.escuelaing.reactivexd.reactiveXD.Trigger <em>Trigger</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.edu.escuelaing.reactivexd.reactiveXD.Trigger
   * @generated
   */
  public Adapter createTriggerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.edu.escuelaing.reactivexd.reactiveXD.JVMTYPE <em>JVMTYPE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.edu.escuelaing.reactivexd.reactiveXD.JVMTYPE
   * @generated
   */
  public Adapter createJVMTYPEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.edu.escuelaing.reactivexd.reactiveXD.KindAttribute <em>Kind Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.edu.escuelaing.reactivexd.reactiveXD.KindAttribute
   * @generated
   */
  public Adapter createKindAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.edu.escuelaing.reactivexd.reactiveXD.MSig <em>MSig</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.edu.escuelaing.reactivexd.reactiveXD.MSig
   * @generated
   */
  public Adapter createMSigAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.edu.escuelaing.reactivexd.reactiveXD.OrEvent <em>Or Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.edu.escuelaing.reactivexd.reactiveXD.OrEvent
   * @generated
   */
  public Adapter createOrEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.edu.escuelaing.reactivexd.reactiveXD.AndEvent <em>And Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.edu.escuelaing.reactivexd.reactiveXD.AndEvent
   * @generated
   */
  public Adapter createAndEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.edu.escuelaing.reactivexd.reactiveXD.UnaryEvent <em>Unary Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.edu.escuelaing.reactivexd.reactiveXD.UnaryEvent
   * @generated
   */
  public Adapter createUnaryEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //ReactiveXDAdapterFactory
