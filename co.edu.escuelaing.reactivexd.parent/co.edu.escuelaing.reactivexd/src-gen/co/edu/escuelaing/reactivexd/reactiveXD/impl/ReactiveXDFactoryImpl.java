/**
 * generated by Xtext 2.17.0
 */
package co.edu.escuelaing.reactivexd.reactiveXD.impl;

import co.edu.escuelaing.reactivexd.reactiveXD.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ReactiveXDFactoryImpl extends EFactoryImpl implements ReactiveXDFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ReactiveXDFactory init()
  {
    try
    {
      ReactiveXDFactory theReactiveXDFactory = (ReactiveXDFactory)EPackage.Registry.INSTANCE.getEFactory(ReactiveXDPackage.eNS_URI);
      if (theReactiveXDFactory != null)
      {
        return theReactiveXDFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ReactiveXDFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReactiveXDFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ReactiveXDPackage.MODEL: return createModel();
      case ReactiveXDPackage.DECL: return createDecl();
      case ReactiveXDPackage.OBSRV_DECL: return createObsrvDecl();
      case ReactiveXDPackage.OBSRV_ASSIG: return createObsrvAssig();
      case ReactiveXDPackage.EVENT_EXPRESSION: return createEventExpression();
      case ReactiveXDPackage.EVENT_PREDICATE: return createEventPredicate();
      case ReactiveXDPackage.TRIGGER: return createTrigger();
      case ReactiveXDPackage.JVMTYPE: return createJVMTYPE();
      case ReactiveXDPackage.KIND_ATTRIBUTE: return createKindAttribute();
      case ReactiveXDPackage.MSIG: return createMSig();
      case ReactiveXDPackage.OR_EVENT: return createOrEvent();
      case ReactiveXDPackage.AND_EVENT: return createAndEvent();
      case ReactiveXDPackage.UNARY_EVENT: return createUnaryEvent();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case ReactiveXDPackage.EVENT_TYPE:
        return createEventTypeFromString(eDataType, initialValue);
      case ReactiveXDPackage.TPREFIX:
        return createTPrefixFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case ReactiveXDPackage.EVENT_TYPE:
        return convertEventTypeToString(eDataType, instanceValue);
      case ReactiveXDPackage.TPREFIX:
        return convertTPrefixToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Decl createDecl()
  {
    DeclImpl decl = new DeclImpl();
    return decl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObsrvDecl createObsrvDecl()
  {
    ObsrvDeclImpl obsrvDecl = new ObsrvDeclImpl();
    return obsrvDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObsrvAssig createObsrvAssig()
  {
    ObsrvAssigImpl obsrvAssig = new ObsrvAssigImpl();
    return obsrvAssig;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EventExpression createEventExpression()
  {
    EventExpressionImpl eventExpression = new EventExpressionImpl();
    return eventExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EventPredicate createEventPredicate()
  {
    EventPredicateImpl eventPredicate = new EventPredicateImpl();
    return eventPredicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Trigger createTrigger()
  {
    TriggerImpl trigger = new TriggerImpl();
    return trigger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JVMTYPE createJVMTYPE()
  {
    JVMTYPEImpl jvmtype = new JVMTYPEImpl();
    return jvmtype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KindAttribute createKindAttribute()
  {
    KindAttributeImpl kindAttribute = new KindAttributeImpl();
    return kindAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MSig createMSig()
  {
    MSigImpl mSig = new MSigImpl();
    return mSig;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OrEvent createOrEvent()
  {
    OrEventImpl orEvent = new OrEventImpl();
    return orEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AndEvent createAndEvent()
  {
    AndEventImpl andEvent = new AndEventImpl();
    return andEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnaryEvent createUnaryEvent()
  {
    UnaryEventImpl unaryEvent = new UnaryEventImpl();
    return unaryEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EventType createEventTypeFromString(EDataType eDataType, String initialValue)
  {
    EventType result = EventType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEventTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TPrefix createTPrefixFromString(EDataType eDataType, String initialValue)
  {
    TPrefix result = TPrefix.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTPrefixToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReactiveXDPackage getReactiveXDPackage()
  {
    return (ReactiveXDPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ReactiveXDPackage getPackage()
  {
    return ReactiveXDPackage.eINSTANCE;
  }

} //ReactiveXDFactoryImpl
