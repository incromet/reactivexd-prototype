/**
 * generated by Xtext 2.17.0
 */
package co.edu.escuelaing.reactivexd.reactiveXD.impl;

import co.edu.escuelaing.reactivexd.reactiveXD.JVMTYPE;
import co.edu.escuelaing.reactivexd.reactiveXD.ReactiveXDPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.xtext.common.types.JvmTypeReference;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>JVMTYPE</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link co.edu.escuelaing.reactivexd.reactiveXD.impl.JVMTYPEImpl#getAstk <em>Astk</em>}</li>
 *   <li>{@link co.edu.escuelaing.reactivexd.reactiveXD.impl.JVMTYPEImpl#getJvmRef <em>Jvm Ref</em>}</li>
 * </ul>
 *
 * @generated
 */
public class JVMTYPEImpl extends MinimalEObjectImpl.Container implements JVMTYPE
{
  /**
   * The default value of the '{@link #getAstk() <em>Astk</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAstk()
   * @generated
   * @ordered
   */
  protected static final String ASTK_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAstk() <em>Astk</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAstk()
   * @generated
   * @ordered
   */
  protected String astk = ASTK_EDEFAULT;

  /**
   * The cached value of the '{@link #getJvmRef() <em>Jvm Ref</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJvmRef()
   * @generated
   * @ordered
   */
  protected JvmTypeReference jvmRef;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected JVMTYPEImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ReactiveXDPackage.Literals.JVMTYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getAstk()
  {
    return astk;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAstk(String newAstk)
  {
    String oldAstk = astk;
    astk = newAstk;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReactiveXDPackage.JVMTYPE__ASTK, oldAstk, astk));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JvmTypeReference getJvmRef()
  {
    return jvmRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetJvmRef(JvmTypeReference newJvmRef, NotificationChain msgs)
  {
    JvmTypeReference oldJvmRef = jvmRef;
    jvmRef = newJvmRef;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ReactiveXDPackage.JVMTYPE__JVM_REF, oldJvmRef, newJvmRef);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setJvmRef(JvmTypeReference newJvmRef)
  {
    if (newJvmRef != jvmRef)
    {
      NotificationChain msgs = null;
      if (jvmRef != null)
        msgs = ((InternalEObject)jvmRef).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ReactiveXDPackage.JVMTYPE__JVM_REF, null, msgs);
      if (newJvmRef != null)
        msgs = ((InternalEObject)newJvmRef).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ReactiveXDPackage.JVMTYPE__JVM_REF, null, msgs);
      msgs = basicSetJvmRef(newJvmRef, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReactiveXDPackage.JVMTYPE__JVM_REF, newJvmRef, newJvmRef));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ReactiveXDPackage.JVMTYPE__JVM_REF:
        return basicSetJvmRef(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ReactiveXDPackage.JVMTYPE__ASTK:
        return getAstk();
      case ReactiveXDPackage.JVMTYPE__JVM_REF:
        return getJvmRef();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ReactiveXDPackage.JVMTYPE__ASTK:
        setAstk((String)newValue);
        return;
      case ReactiveXDPackage.JVMTYPE__JVM_REF:
        setJvmRef((JvmTypeReference)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ReactiveXDPackage.JVMTYPE__ASTK:
        setAstk(ASTK_EDEFAULT);
        return;
      case ReactiveXDPackage.JVMTYPE__JVM_REF:
        setJvmRef((JvmTypeReference)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ReactiveXDPackage.JVMTYPE__ASTK:
        return ASTK_EDEFAULT == null ? astk != null : !ASTK_EDEFAULT.equals(astk);
      case ReactiveXDPackage.JVMTYPE__JVM_REF:
        return jvmRef != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (astk: ");
    result.append(astk);
    result.append(')');
    return result.toString();
  }

} //JVMTYPEImpl
